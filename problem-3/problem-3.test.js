/*
1. 다음은 삽입 정렬의 알고리즘입니다. 알고리즘을 보고 다음 값이 주어졌을 때
   어떻게 정렬이 되는지 그림으로 그려보세요.

> 1. 가장 첫 번째 요소는 정렬되어있다고 가정한다. 
> 2. 두번 째 항목부터 인접한 왼쪽 요소와 비교해서 더 작으면 교환한다.
> 3. 배열의 맨 앞에 도달하거나, 더 큰 작은 항목을 만날 때까지 반복한다. 
> 4. 세번 째 항목부터 다시 인접한 왼쪽 요소와 비교해서 교환하는 과정을 반복한다. 
> 5. 모든 배열이 정렬될때까지 반복한다.
```
4, 2, 1, 5, 3
```
[4, 2, 1, 5, 3]  ->  [2, 4, 1, 5, 3]  ->  [2, 1, 4, 5, 3]  ->  [1, 2, 4, 5, 3]  
->  [1, 2, 4, 5, 3]  ->  [1, 2, 4, 3, 5]  ->  [1, 2, 3, 4, 5]

2. 삽입 정렬의 코드를 보고 어떻게 동작하는지 그림을 그려보세요. 마찬가지로 위의 값이 주어졌다고 했을 때 코드를 따라가며 그림을 그려가며 이해해 보세요.

3. 삽입 정렬의 코드를 직접 구현해 주세요.

*/
const exchange = (array, a, b) => {
  [array[b], array[a]] = [array[a], array[b]];
};

const compare = (array, a, b) => array[a] < array[b];

const insertionSort = (array) => {
  for (let i = 1; i < array.length; i++) {
    for (let j = i; j > 0; j--) {
      if (compare(array, j, j - 1)) {
        exchange(array, j, j - 1);
      }
    }
  }
};

test.each([[[5, 4, 3, 2, 1]], [[1, 2, 3, 4, 5]], [[4, 2, 1, 5, 3]]])(
  "주어진 배열을 오름차순으로 정렬한다",
  (array) => {
    insertionSort(array);

    expect(array).toEqual([1, 2, 3, 4, 5]);
  }
);
